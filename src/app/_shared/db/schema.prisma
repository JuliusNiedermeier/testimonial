generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_URL")
}

model Form {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug  String @unique
  title String

  teamId String @db.Uuid
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("form")
}

model Team {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug             String       @unique
  name             String
  memberships      Membership[]
  forms            Form[]
  lastVisitedUsers User[]

  @@map("team")
}

model Membership {
  teamId String @db.Uuid
  team   Team   @relation(fields: [teamId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@map("membership")
}

// Generated by better-auth
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // Custom properties that extend better-auths properties
  memberships       Membership[]
  lastVisitedTeamId String?      @db.Uuid // Configured in auth options as additional user field
  lastVisitedTeam   Team?        @relation(fields: [lastVisitedTeamId], references: [id])

  // Generated by better-auth
  @@unique([email])
  @@map("user")
}

// Generated by better-auth
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

// Generated by better-auth
model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

// Generated by better-auth
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
